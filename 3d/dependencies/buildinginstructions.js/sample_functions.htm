<!DOCTYPE html>
<html>
 <head>
  <meta charset=utf-8>
  <title>Sample Functions</title>
  <meta name="viewport" content="width=device-width" />
  <link href="css/functions.css" rel="stylesheet" type="text/css">
 </head>
 <body>
  <script src="js/three.min.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="js/colors.js"></script>
  <script src="js/LDROptions.js"></script>
  <script src="js/LDRShaders.js"></script>
  <script src="js/LDRColorMaterials.js"></script>
  <script src="js/LDRGeometries.js"></script>
  <script src="js/LDRLoader.js"></script>
  <script src="js/LDRGenerator.js"></script>
  <script src="js/LDRStuds.js"></script>
  <script src="js/LDROMR.js"></script>

  <div id="main_canvas_holder">
   <canvas id="main_canvas"></canvas>
  </div>
  <div id="functions"></div>
  <div id="file_content_holder"><textarea cols="80" rows="40" id="file_content" readonly="readonly"></textarea></div>

  <script>
      //var modelTypeUrl = 'models/omr_3_all_errors.mpd';
      var modelTypeUrl = 'models/omr_1_ok.mpd';

      // Set up camera:
      var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000000);
      camera.position.set(10000, 7000, 10000);
      camera.lookAt(new THREE.Vector3());

      // Set up scene:
      var scene = new THREE.Scene();
      scene.background = new THREE.Color(0xDDDDDD);

      var baseObject = new THREE.Group(), opaqueObject = new THREE.Group(), sixteenObject = new THREE.Group(); transObject = new THREE.Group();
      baseObject.add(opaqueObject); // Draw non-trans before trans.
      baseObject.add(sixteenObject);
      baseObject.add(transObject);
      scene.add(baseObject);
      var mc = new LDR.MeshCollector(opaqueObject, sixteenObject, transObject);

      // Set up renderer:
      var canvas = document.getElementById('main_canvas');
      var canvasHolder = document.getElementById('main_canvas_holder');
      var renderer = new THREE.WebGLRenderer({antialias:true, canvas:canvas});
      renderer.setPixelRatio(window.devicePixelRatio);
      function render() {
        renderer.render(scene, camera);
      }

      function onWindowResize(){
        let w = Math.min(400, window.innerWidth);
        let h = Math.min(400, window.innerHeight);
        camera.left = -w;
        camera.right = w;
        camera.top = h;
        camera.bottom = -h;
        camera.updateProjectionMatrix();
        renderer.setSize(w, h);
        render();
      }

      // React to user input:
      var controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.addEventListener('change', render);
      window.addEventListener('resize', onWindowResize, false);

      // Three.js loader for LDraw models:
      var ldrLoader;

      var onLoad = function() {
        var mainModel = ldrLoader.getMainModel();

        // Place model in scene:
        var origo = new THREE.Vector3();
        var inv = new THREE.Matrix3(); 
        inv.set(1,0,0, 0,-1,0, 0,0,-1); // Invert Y, and Z-axis for LDraw

        // Generate the mesh:
        mainModel.generateThreePart(ldrLoader, 0, origo, inv, true, false, mc);

        // Find center of drawn model:
        var b = mc.boundingBox;
        var elementCenter = new THREE.Vector3();
        b.getCenter(elementCenter);
        baseObject.position.set(-elementCenter.x, -elementCenter.y, -elementCenter.z);

	camera.zoom = window.innerWidth/b.min.distanceTo(b.max);
        onWindowResize();
        createFunctionButtons();

        var fileContent = mainModel.toLDR(ldrLoader);
        ldrLoader.applyOnPartTypes(pt =>{
          if(pt.ID !== ldrLoader.mainModel &&
             (pt.isPart ? pt.ldraw_org === 'Unofficial_Part' : true)) {
            fileContent += pt.toLDR(ldrLoader);
          }
        });

        document.getElementById('file_content').innerHTML = fileContent;
      }

      ldrLoader = new THREE.LDRLoader(onLoad, null, {saveFileLines:true});
      ldrLoader.load(modelTypeUrl);

      /*
      Functions: 
      - Make colors red
      - Make colors old/new
      - Fix OMR compliancy (naming, inline unofficial models, consistency between 'FILE' and 'Name:', etc.)
      - Fix stud.io issues (precision .000xxx, .ldr in file names)
       */
      function createFunctionButtons() {
        let functionsEle = document.getElementById('functions');
        while(functionsEle.firstChild) {
          functionsEle.removeChild(functionsEle.firstChild);
        }        

        createFunctionButton({checkPartDescription:pd=>pd.c !== 4 ? "Color everything red" : false}, {handlePartDescription:pd => pd.c=4});

        createFunctionButtonFromObject(LDR.OMR.ColorPartsAccordingToYear(2006, ldrLoader));
        createFunctionButtonFromObject(LDR.OMR.ColorPartsAccordingToYear(2007, ldrLoader));
        createFunctionButtonFromObject(LDR.OMR.UpgradeToReplacements(ldrLoader));
        //createFunctionButtonFromObject(LDR.OMR.UpgradeToNewPartsBasedOnYear(2020));
        createFunctionButtonFromObject(LDR.OMR.StandardizeFileNames('6712', ldrLoader));
        createFunctionButtonFromObject(LDR.OMR.FixAuthors('Peter Falk [columbo]'));
        createFunctionButtonFromObject(LDR.OMR.SetLDrawOrg(false));
        createFunctionButtonFromObject(LDR.OMR.SetLDrawOrg(true));
        createFunctionButtonFromObject(LDR.OMR.FixLicenses());
        createFunctionButtonFromObject(LDR.OMR.FixPlacements(ldrLoader));
      }

      function ele(type, cls, parent, desc) {
        let ret = document.createElement(type);
        parent.append(ret);
        ret.setAttribute('class', cls);
        if(desc)
          ret.innerHTML = desc;
        return ret;
      }

      function createFunctionButtonFromObject(obj) {
        createFunctionButton(obj.checkers, obj.handlers);
      }

      function createFunctionButton(checks, handlers) {
        let mainPT = ldrLoader.getMainModel();

        // Check if function button should be shown:
        let checkPD = function(pd) {
	  let ret = checks.checkPartDescription && checks.checkPartDescription(pd)
          if(ret) {
            console.log('Function enabled due to ' + pd.ID + ' in color ' + pd.c);
            return ret;
          }
          let pt = ldrLoader.getPartType(pd.ID);
          return checkPT(pt);
        }
        let checkStep = function(step) {
	  ret = checks.checkStep && checks.checkStep(step);
          if(ret) {
            return ret;
          }
          if(step.subModels) {
            return step.subModels.map(pd => checkPD(pd)).reduce((acc, curr) => acc ? acc : curr);
          }
          return false;
        }
        let checkPT = function(pt) {
	  let ret = checks.checkPartType && checks.checkPartType(pt);
          if(ret) {
            console.log('Function valid due to part type ' + pt.ID);
	    return ret;
          }
	  if(pt.isPart)
	    return false; // Stop recursion on parts.
          return pt.steps.map(step => checkStep(step)).reduce((acc, curr) => acc ? acc : curr);
        }

	let desc = checkPT(mainPT);
        if(!desc) {
          return;
        }

        let button = ele('div', 'function', document.getElementById('functions'), desc);

        let handlePD = function(pd, state) {
          handlers.handlePartDescription && handlers.handlePartDescription(pd, state);
          let pt = ldrLoader.getPartType(pd.ID);
          handlePT(pt, state);
        }
        let handleStep = function(step, state) {
          handlers.handleStep && handlers.handleStep(step);
          if(step.subModels)
            step.subModels.forEach(pd => handlePD(pd, pd.placeAt(state)));
        }
        let handlePT = function(pt, state) {
          handlers.handlePartType && handlers.handlePartType(pt, state);
          pt.steps.forEach(step => handleStep(step, state));
        }

        let action = function() {
          let id = new THREE.Matrix3(); id.set(1, 0, 0, 0, 1, 0, 0, 0, 1);
          let pd = new THREE.LDRPartDescription(16, new THREE.Vector3(), id, mainPT.ID, true, false);
          handlePT(mainPT, pd);

          // Rebuild:
          baseObject.remove(opaqueObject);
          baseObject.remove(transObject);
          mc.opaqueObject = opaqueObject = new THREE.Group();
          mc.transObject = transObject = new THREE.Group();
          baseObject.add(opaqueObject);
          baseObject.add(transObject);
          onLoad();

          button.style.display = 'none';
        }
        button.addEventListener('click', action);
      }
  </script>
 </body>
</html>
